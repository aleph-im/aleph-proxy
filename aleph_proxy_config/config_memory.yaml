http:
  routers:
    to-aleph-vm-memory-small:  # Forward VM calls to all available Compute Resource Nodes in the network with memory < 16GB
      rule: "PathPrefix(`/vm-memory-small/`)"
      service: aleph-vm-memory-small
      middlewares:
        - retry-if-no-reply
      tls:
        certResolver: letsencrypt
        domains:
          - main: "aleph.cloud"  # Change to the domain you are using

    to-aleph-vm-memory-medium:  # Forward VM calls to all available Compute Resource Nodes in the network with 16 < memory > 32
      rule: "PathPrefix(`/vm-memory-medium/`)"
      service: aleph-vm-memory-medium
      middlewares:
        - retry-if-no-reply
      tls:
        certResolver: letsencrypt
        domains:
          - main: "aleph.cloud"  # Change to the domain you are using

    to-aleph-vm-memory-large:  # Forward VM calls to all available Compute Resource Nodes in the network with memory 32 < memory > 128
      rule: "PathPrefix(`/vm-memory-large/`)"
      service: aleph-vm-memory-large
      middlewares:
        - retry-if-no-reply
      tls:
        certResolver: letsencrypt
        domains:
          - main: "aleph.cloud"  # Change to the domain you are using

    to-aleph-vm-memory-xlarge:  # Forward VM calls to all available Memory Resource Nodes in the network with memory > 128
      rule: "PathPrefix(`/vm-memory-xlarge/`)"
      service: aleph-vm-memory-xlarge
      middlewares:
        - retry-if-no-reply
      tls:
        certResolver: letsencrypt
        domains:
          - main: "aleph.cloud"  # Change to the domain you are using

  middlewares:
    retry-if-no-reply:
      retry:
        attempts: 4
        initialInterval: 5ms

    do-not-add-headers:
      headers:
        customRequestHeaders:
          X-Forwarded-Host: "aleph-proxy-homepage.aleph.cloud"
          X-Forwarded-Port: ""
          X-Forwarded-Proto: ""
          X-Forwarded-Server: ""
          X-Real-Ip: ""

  services:
    aleph-vm-memory-small:
      loadBalancer:
        healthcheck:
          # Check the health of Memory Resource Nodes by calling the
          # fastapi demo path
          path: /vm/67705389842a0a1b95eaa408b009741027964edc805997475e95c505d642edd8
          interval: 60s
          timeout: 10s
        passHostHeader: false
        servers:  # These are the initial values, they will be updated from the list of nodes
        - url: https://aleph.sh/vm/
        - url: https://vm.demo.okeso.fr/vm/
        sticky:
          # Clients receive a session cookie that allows them to call the same Memory Resource Node for
          # all calls.
          cookie:
            name: aleph-proxy-memory-sticky-session

    aleph-vm-memory-medium:
      loadBalancer:
        healthcheck:
          # Check the health of Memory Resource Nodes by calling the
          # fastapi demo path
          path: /vm/67705389842a0a1b95eaa408b009741027964edc805997475e95c505d642edd8
          interval: 60s
          timeout: 10s
        passHostHeader: false
        servers:  # These are the initial values, they will be updated from the list of nodes
        - url: https://aleph.sh/vm/
        - url: https://vm.demo.okeso.fr/vm/
        sticky:
          # Clients receive a session cookie that allows them to call the same Memory Resource Node for
          # all calls.
          cookie:
            name: aleph-proxy-memory-sticky-session

    aleph-vm-memory-large:
      loadBalancer:
        healthcheck:
          # Check the health of Memory Resource Nodes by calling the
          # fastapi demo path
          path: /vm/67705389842a0a1b95eaa408b009741027964edc805997475e95c505d642edd8
          interval: 60s
          timeout: 10s
        passHostHeader: false
        servers:  # These are the initial values, they will be updated from the list of nodes
        - url: https://aleph.sh/vm/
        - url: https://vm.demo.okeso.fr/vm/
        sticky:
          # Clients receive a session cookie that allows them to call the same Memory Resource Node for
          # all calls.
          cookie:
            name: aleph-proxy-memory-sticky-session

    aleph-vm-memory-xlarge:
      loadBalancer:
        healthcheck:
          # Check the health of Memory Resource Nodes by calling the
          # fastapi demo path
          path: /vm/67705389842a0a1b95eaa408b009741027964edc805997475e95c505d642edd8
          interval: 60s
          timeout: 10s
        passHostHeader: false
        servers:  # These are the initial values, they will be updated from the list of nodes
        - url: https://aleph.sh/vm/
        - url: https://vm.demo.okeso.fr/vm/
        sticky:
          # Clients receive a session cookie that allows them to call the same Memory Resource Node for
          # all calls.
          cookie:
            name: aleph-proxy-memory-sticky-session
